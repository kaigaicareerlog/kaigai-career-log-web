---
// This component handles the Tab+L modal for showing episode GUID
import Modal from './common/Modal.astro';
---

<Modal id="episode-guid-modal" title="Episode GUID">
  <div class="guid-section">
    <div class="guid-label">
      <h3>GUID</h3>
      <p class="guid-description">Use this GUID to update URLs or transcribe this episode</p>
    </div>
    <div class="guid-input-container">
      <input type="text" id="guid-input" readonly class="guid-input" />
      <button id="copy-guid-btn" class="copy-guid-btn" title="Copy GUID">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
      </button>
    </div>
  </div>

  <div slot="footer" class="footer-content">
    <div class="keyboard-hint">
      Press <kbd>Tab</kbd> + <kbd>L</kbd> to toggle â€¢ <kbd>Esc</kbd> to close
    </div>
    <span id="copy-guid-feedback" class="copy-feedback">Copied!</span>
  </div>
</Modal>

<script>
  import {
    getModalElements,
    showModal,
    hideModal,
    toggleModal,
    setupModalOutsideClick,
    copyToClipboard,
  } from '../utils/modal';

  // Get modal elements
  const { modal, closeBtn } = getModalElements('episode-guid-modal');
  const guidInput = document.getElementById('guid-input') as HTMLInputElement;
  const copyBtn = document.getElementById('copy-guid-btn');
  const copyFeedback = document.getElementById('copy-guid-feedback');

  let tabPressed = false;

  // Listen for Tab + L keypress
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    if (e.key === 'Tab') {
      tabPressed = true;
    }

    if ((e.key === 'l' || e.key === 'L') && tabPressed) {
      e.preventDefault();
      handleToggle();
    }

    if (e.key === 'Escape') {
      hideModal(modal);
    }
  });

  document.addEventListener('keyup', (e: KeyboardEvent) => {
    if (e.key === 'Tab') {
      tabPressed = false;
    }
  });

  // Setup event listeners
  closeBtn?.addEventListener('click', () => hideModal(modal));
  copyBtn?.addEventListener('click', handleCopy);
  setupModalOutsideClick(modal, () => hideModal(modal));

  function handleToggle() {
    if (modal?.classList.contains('active')) {
      hideModal(modal);
    } else {
      openModal();
    }
  }

  function openModal() {
    if (!modal) return;

    // Try to get current episode data
    const episodeData = (window as any).__EPISODE_DATA__;

    if (episodeData && episodeData.guid) {
      // Update modal title
      const titleEl = document.getElementById('episode-guid-modal-title');
      if (titleEl && episodeData.title) {
        titleEl.textContent = episodeData.title;
      }

      // Update GUID input
      if (guidInput) {
        guidInput.value = episodeData.guid;
      }

      showModal(modal);

      // Auto-select the GUID for easy copying
      setTimeout(() => {
        guidInput?.select();
      }, 100);
    }
  }

  // Expose openModal function globally
  (window as any).__openEpisodeGuidModal = openModal;

  async function handleCopy() {
    if (!guidInput || !guidInput.value) return;
    await copyToClipboard(guidInput.value, copyFeedback);
  }
</script>

<style>
  .guid-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .guid-label h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-text);
  }

  .guid-description {
    margin: 0;
    font-size: 0.875rem;
    color: var(--color-muted);
  }

  .guid-input-container {
    display: flex;
    gap: 0.5rem;
    align-items: stretch;
  }

  .guid-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    font-family: 'Monaco', 'Courier New', monospace;
    font-size: 0.9rem;
    background-color: rgba(59, 130, 246, 0.05);
    color: var(--color-text);
    transition: all 0.2s ease;
  }

  .guid-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .copy-guid-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    background-color: rgba(59, 130, 246, 0.1);
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    color: var(--color-primary);
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .copy-guid-btn:hover {
    background-color: rgba(59, 130, 246, 0.2);
    border-color: var(--color-primary);
  }

  .copy-guid-btn:active {
    transform: scale(0.95);
  }

  .copy-guid-btn svg {
    display: block;
  }

  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .keyboard-hint {
    font-size: 0.875rem;
    color: var(--color-muted);
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  kbd {
    padding: 0.2rem 0.4rem;
    background-color: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Courier New', monospace;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .copy-feedback {
    opacity: 0;
    transform: translateX(10px);
    transition: all 0.3s ease;
    color: #10b981;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .copy-feedback.show {
    opacity: 1;
    transform: translateX(0);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .guid-input {
      font-size: 0.8rem;
    }

    .keyboard-hint {
      font-size: 0.75rem;
    }
  }
</style>
