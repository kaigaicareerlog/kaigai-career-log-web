---
// This component handles the Tab+E modal for showing episode URLs
import Modal from './common/Modal.astro';
---

<Modal id="episode-url-modal" title="Episode URLs">
  <div class="url-section">
    <h3>Apple Podcasts</h3>
    <input type="text" id="apple-url" readonly class="url-input" />
  </div>
  <div class="url-section">
    <h3>Spotify</h3>
    <input type="text" id="spotify-url" readonly class="url-input" />
  </div>
  <div class="url-section">
    <h3>YouTube</h3>
    <input type="text" id="youtube-url" readonly class="url-input" />
  </div>
  <div class="url-section">
    <h3>Amazon Music</h3>
    <input type="text" id="amazon-url" readonly class="url-input" />
  </div>

  <div slot="footer" class="footer-content">
    <button id="copy-all-btn" class="copy-all-btn">
      <span class="btn-icon">ðŸ“‹</span>
      <span class="btn-text">Copy All</span>
    </button>
    <span id="copy-feedback" class="copy-feedback">Copied!</span>
  </div>
</Modal>

<script>
  import {
    getModalElements,
    showModal,
    hideModal,
    setupModalOutsideClick,
    copyToClipboard,
  } from '../utils/modal';

  // Get modal elements
  const { modal, closeBtn } = getModalElements('episode-url-modal');
  const copyAllBtn = document.getElementById('copy-all-btn');
  const copyFeedback = document.getElementById('copy-feedback');

  let currentEpisode: any = null;
  let tabPressed = false;

  // Listen for Tab + E keypress
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    if (e.key === 'Tab') {
      tabPressed = true;
    }

    if ((e.key === 'e' || e.key === 'E') && tabPressed) {
      e.preventDefault();
      openModal();
    }

    if (e.key === 'Escape') {
      hideModal(modal);
    }
  });

  document.addEventListener('keyup', (e: KeyboardEvent) => {
    if (e.key === 'Tab') {
      tabPressed = false;
    }
  });

  // Setup event listeners
  closeBtn?.addEventListener('click', () => hideModal(modal));
  copyAllBtn?.addEventListener('click', copyAllToClipboard);
  setupModalOutsideClick(modal, () => hideModal(modal));

  function openModal() {
    if (!modal) return;

    // Try to get current episode data
    const episodeData = (window as any).__EPISODE_DATA__;

    if (episodeData) {
      currentEpisode = episodeData;

      // Update modal content
      const titleEl = document.getElementById('episode-url-modal-title');
      const appleInput = document.getElementById('apple-url') as HTMLInputElement;
      const spotifyInput = document.getElementById('spotify-url') as HTMLInputElement;
      const youtubeInput = document.getElementById('youtube-url') as HTMLInputElement;
      const amazonInput = document.getElementById('amazon-url') as HTMLInputElement;

      if (titleEl && episodeData.title) {
        titleEl.textContent = episodeData.title;
      }

      if (appleInput) appleInput.value = episodeData.applePodcastUrl || '';
      if (spotifyInput) spotifyInput.value = episodeData.spotifyUrl || '';
      if (youtubeInput) youtubeInput.value = episodeData.youtubeUrl || '';
      if (amazonInput) amazonInput.value = episodeData.amazonMusicUrl || '';

      showModal(modal);
    }
  }

  async function copyAllToClipboard() {
    if (!currentEpisode) return;

    const urls: string[] = [];

    if (currentEpisode.applePodcastUrl) {
      urls.push(`Apple Podcasts: ${currentEpisode.applePodcastUrl}`);
    }
    if (currentEpisode.spotifyUrl) {
      urls.push(`Spotify: ${currentEpisode.spotifyUrl}`);
    }
    if (currentEpisode.youtubeUrl) {
      urls.push(`YouTube: ${currentEpisode.youtubeUrl}`);
    }
    if (currentEpisode.amazonMusicUrl) {
      urls.push(`Amazon Music: ${currentEpisode.amazonMusicUrl}`);
    }

    if (urls.length === 0) return;

    const textToCopy = urls.join('\n');
    await copyToClipboard(textToCopy, copyFeedback);
  }
</script>

<style>
  .url-section {
    margin-bottom: 1.5rem;
  }

  .url-section:last-of-type {
    margin-bottom: 0;
  }

  .url-section h3 {
    margin: 0 0 0.5rem 0;
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--color-text);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .url-input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    font-size: 0.9rem;
    background-color: rgba(59, 130, 246, 0.05);
    color: var(--color-text);
    transition: all 0.2s ease;
    font-family: system-ui, -apple-system, sans-serif;
  }

  .url-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .url-input:empty::before {
    content: 'No URL available';
    color: var(--color-muted);
    font-style: italic;
  }

  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .copy-all-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .copy-all-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }

  .copy-all-btn:active {
    transform: translateY(0);
  }

  .btn-icon {
    font-size: 1.1rem;
  }

  .copy-feedback {
    opacity: 0;
    transform: translateX(10px);
    transition: all 0.3s ease;
    color: #10b981;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .copy-feedback.show {
    opacity: 1;
    transform: translateX(0);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .url-section {
      margin-bottom: 1.25rem;
    }

    .url-input {
      font-size: 0.85rem;
    }
  }
</style>
