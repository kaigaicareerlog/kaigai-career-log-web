---
// This component handles the Cmd+Shift+E modal for showing episode URLs and GUID
import Modal from './common/Modal.astro';
---

<Modal id="episode-url-modal" title="Episode Info">
  <!-- GUID Section -->
  <div class="guid-section">
    <div class="guid-label">
      <h3>üÜî GUID</h3>
      <p class="guid-description">
        Use this GUID to update URLs or transcribe this episode
      </p>
    </div>
    <div class="guid-input-container">
      <input type="text" id="guid-input" readonly class="guid-input" />
      <button id="copy-guid-btn" class="copy-guid-btn" title="Copy GUID">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Highlights Section -->
  <div id="highlights-container" class="highlights-container">
    <h3>‚ú® Highlights</h3>
    <div class="highlights-list">
      <div class="highlight-item">
        <div class="highlight-input-container">
          <input
            type="text"
            id="highlight-1"
            readonly
            class="highlight-input"
          />
          <button
            class="copy-highlight-btn"
            data-highlight="1"
            title="Copy highlight"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
              ></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="highlight-item">
        <div class="highlight-input-container">
          <input
            type="text"
            id="highlight-2"
            readonly
            class="highlight-input"
          />
          <button
            class="copy-highlight-btn"
            data-highlight="2"
            title="Copy highlight"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
              ></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="highlight-item">
        <div class="highlight-input-container">
          <input
            type="text"
            id="highlight-3"
            readonly
            class="highlight-input"
          />
          <button
            class="copy-highlight-btn"
            data-highlight="3"
            title="Copy highlight"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2 2v1"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- URLs Section -->
  <div class="urls-container">
    <h3 class="section-title">üîó Platform URLs</h3>
    <div class="url-section">
      <h3>Apple Podcasts</h3>
      <input type="text" id="apple-url" readonly class="url-input" />
    </div>
    <div class="url-section">
      <h3>Spotify</h3>
      <input type="text" id="spotify-url" readonly class="url-input" />
    </div>
    <div class="url-section">
      <h3>YouTube</h3>
      <input type="text" id="youtube-url" readonly class="url-input" />
    </div>
    <div class="url-section">
      <h3>Amazon Music</h3>
      <input type="text" id="amazon-url" readonly class="url-input" />
    </div>
  </div>

  <div slot="footer" class="footer-content">
    <span id="copy-feedback" class="copy-feedback">Copied!</span>
    <div class="button-group">
      <button id="copy-title-btn" class="copy-btn">
        <span class="btn-icon">üìù</span>
        <span class="btn-text">Copy Title</span>
      </button>
      <button id="copy-all-btn" class="copy-btn">
        <span class="btn-icon">üìã</span>
        <span class="btn-text">Copy Urls</span>
      </button>
    </div>
  </div>
</Modal>

<script>
  import {
    getModalElements,
    showModal,
    hideModal,
    setupModalOutsideClick,
    copyToClipboard,
  } from '../utils/modal';

  // Get modal elements
  const { modal, closeBtn } = getModalElements('episode-url-modal');
  const guidInput = document.getElementById('guid-input') as HTMLInputElement;
  const copyGuidBtn = document.getElementById('copy-guid-btn');
  const copyTitleBtn = document.getElementById('copy-title-btn');
  const copyAllBtn = document.getElementById('copy-all-btn');
  const copyFeedback = document.getElementById('copy-feedback');

  let currentEpisode: any = null;

  // Listen for Cmd + Shift + E (Mac) or Ctrl + Shift + E (Windows/Linux)
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    // Check for Cmd + Shift + E (Mac) or Ctrl + Shift + E (Windows/Linux)
    if (
      (e.key === 'e' || e.key === 'E') &&
      e.shiftKey &&
      (e.metaKey || e.ctrlKey)
    ) {
      e.preventDefault();
      openModal();
    }

    if (e.key === 'Escape') {
      hideModal(modal);
    }
  });

  // Setup event listeners
  closeBtn?.addEventListener('click', () => hideModal(modal));
  copyGuidBtn?.addEventListener('click', copyGuidToClipboard);
  copyTitleBtn?.addEventListener('click', copyTitleToClipboard);
  copyAllBtn?.addEventListener('click', copyAllToClipboard);
  setupModalOutsideClick(modal, () => hideModal(modal));

  // Setup highlight copy buttons
  document.querySelectorAll('.copy-highlight-btn').forEach((btn) => {
    btn.addEventListener('click', async () => {
      const highlightNum = btn.getAttribute('data-highlight');
      const input = document.getElementById(
        `highlight-${highlightNum}`
      ) as HTMLInputElement;
      if (input && input.value) {
        await copyToClipboard(input.value, copyFeedback);
      }
    });
  });

  function openModal() {
    if (!modal) return;

    // Try to get current episode data
    const episodeData = (window as any).__EPISODE_DATA__;

    if (episodeData) {
      currentEpisode = episodeData;

      // Update modal content
      const titleEl = document.getElementById('episode-url-modal-title');
      const appleInput = document.getElementById(
        'apple-url'
      ) as HTMLInputElement;
      const spotifyInput = document.getElementById(
        'spotify-url'
      ) as HTMLInputElement;
      const youtubeInput = document.getElementById(
        'youtube-url'
      ) as HTMLInputElement;
      const amazonInput = document.getElementById(
        'amazon-url'
      ) as HTMLInputElement;

      // Highlight textareas
      const highlight1 = document.getElementById(
        'highlight-1'
      ) as HTMLTextAreaElement;
      const highlight2 = document.getElementById(
        'highlight-2'
      ) as HTMLTextAreaElement;
      const highlight3 = document.getElementById(
        'highlight-3'
      ) as HTMLTextAreaElement;
      const highlightsContainer = document.getElementById(
        'highlights-container'
      );

      if (titleEl && episodeData.title) {
        titleEl.textContent = episodeData.title;
      }

      // Update GUID input
      if (guidInput && episodeData.guid) {
        guidInput.value = episodeData.guid;
      }

      if (appleInput) appleInput.value = episodeData.applePodcastUrl || '';
      if (spotifyInput) spotifyInput.value = episodeData.spotifyUrl || '';
      if (youtubeInput) youtubeInput.value = episodeData.youtubeUrl || '';
      if (amazonInput) amazonInput.value = episodeData.amazonMusicUrl || '';

      // Populate highlights if available
      const hasHighlights =
        episodeData.highlight1 ||
        episodeData.highlight2 ||
        episodeData.highlight3;

      if (highlightsContainer) {
        if (hasHighlights) {
          highlightsContainer.style.display = 'block';
          if (highlight1) highlight1.value = episodeData.highlight1 || '';
          if (highlight2) highlight2.value = episodeData.highlight2 || '';
          if (highlight3) highlight3.value = episodeData.highlight3 || '';
        } else {
          highlightsContainer.style.display = 'none';
        }
      }

      showModal(modal);
    }
  }

  // Expose openModal function globally
  (window as any).__openEpisodeUrlModal = openModal;

  async function copyGuidToClipboard() {
    if (!guidInput || !guidInput.value) return;
    await copyToClipboard(guidInput.value, copyFeedback);
  }

  async function copyTitleToClipboard() {
    if (!currentEpisode || !currentEpisode.title) return;
    await copyToClipboard(currentEpisode.title, copyFeedback);
  }

  async function copyAllToClipboard() {
    if (!currentEpisode) return;

    const urls: string[] = [];

    if (currentEpisode.applePodcastUrl) {
      urls.push(`Apple podcast\n${currentEpisode.applePodcastUrl}`);
    }
    if (currentEpisode.spotifyUrl) {
      urls.push(`Spotify\n${currentEpisode.spotifyUrl}`);
    }
    if (currentEpisode.youtubeUrl) {
      urls.push(`Youtube\n${currentEpisode.youtubeUrl}`);
    }
    if (currentEpisode.amazonMusicUrl) {
      urls.push(`Amazon music\n${currentEpisode.amazonMusicUrl}`);
    }

    if (urls.length === 0) return;

    const textToCopy = urls.join('\n\n');
    await copyToClipboard(textToCopy, copyFeedback);
  }
</script>

<style>
  .guid-section {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid rgba(59, 130, 246, 0.2);
  }

  .guid-label h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-primary);
  }

  .guid-description {
    margin: 0 0 1rem 0;
    font-size: 0.875rem;
    color: var(--color-muted);
  }

  .guid-input-container {
    display: flex;
    gap: 0.5rem;
    align-items: stretch;
  }

  .guid-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    font-size: 0.9rem;
    font-family: 'Courier New', monospace;
    background-color: rgba(59, 130, 246, 0.05);
    color: var(--color-text);
    transition: all 0.2s ease;
  }

  .guid-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .copy-guid-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    background-color: rgba(59, 130, 246, 0.1);
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    color: var(--color-primary);
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .copy-guid-btn:hover {
    background-color: rgba(59, 130, 246, 0.2);
    border-color: var(--color-primary);
  }

  .copy-guid-btn:active {
    transform: scale(0.95);
  }

  .copy-guid-btn svg {
    display: block;
  }

  .highlights-container {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid rgba(59, 130, 246, 0.2);
  }

  .highlights-container h3 {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-primary);
  }

  .highlights-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .highlight-item {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .highlight-input-container {
    flex: 1;
    display: flex;
    gap: 0.5rem;
    align-items: stretch;
  }

  .highlight-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    font-size: 0.9rem;
    background-color: rgba(59, 130, 246, 0.05);
    color: var(--color-text);
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
    transition: all 0.2s ease;
  }

  .highlight-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .copy-highlight-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    background-color: rgba(59, 130, 246, 0.1);
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    color: var(--color-primary);
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .copy-highlight-btn:hover {
    background-color: rgba(59, 130, 246, 0.2);
    border-color: var(--color-primary);
  }

  .copy-highlight-btn:active {
    transform: scale(0.95);
  }

  .copy-highlight-btn svg {
    display: block;
  }

  .urls-container {
    margin-top: 1rem;
  }

  .section-title {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-primary);
  }

  .url-section {
    margin-bottom: 1.5rem;
  }

  .url-section:last-of-type {
    margin-bottom: 0;
  }

  .url-section h3 {
    margin: 0 0 0.5rem 0;
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--color-text);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .url-input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    font-size: 0.9rem;
    background-color: rgba(59, 130, 246, 0.05);
    color: var(--color-text);
    transition: all 0.2s ease;
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
  }

  .url-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background-color: rgba(59, 130, 246, 0.1);
  }

  .url-input:empty::before {
    content: 'No URL available';
    color: var(--color-muted);
    font-style: italic;
  }

  .footer-content {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%;
    gap: 1rem;
  }

  .button-group {
    display: flex;
    gap: 0.75rem;
  }

  .copy-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(
      135deg,
      var(--color-primary),
      var(--color-secondary)
    );
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .copy-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }

  .copy-btn:active {
    transform: translateY(0);
  }

  .btn-icon {
    font-size: 1.1rem;
  }

  .copy-feedback {
    opacity: 0;
    transform: translateX(10px);
    transition: all 0.3s ease;
    color: #10b981;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .copy-feedback.show {
    opacity: 1;
    transform: translateX(0);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .url-section {
      margin-bottom: 1.25rem;
    }

    .url-input {
      font-size: 0.85rem;
    }
  }
</style>
