name: Update RSS Feed

on:
  # 毎日午後4時（バンクーバー時間）に実行（UTC 23:00）
  # Runs daily at 4pm Vancouver time (23:00 UTC = 4pm PDT / 3pm PST)
  schedule:
    - cron: '0 23 * * *'

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      post_to_x:
        description: 'Post new episode to X'
        required: true
        type: boolean
        default: false

jobs:
  update-rss:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Set timestamp
        id: timestamp
        run: |
          echo "datetime=$(TZ=Asia/Tokyo date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Download latest RSS feed
        run: |
          FILENAME="public/rss/${{ steps.timestamp.outputs.datetime }}-rss-file.xml"
          curl -o "$FILENAME" https://anchor.fm/s/105976b60/podcast/rss
          echo "New RSS file created: $FILENAME"

      - name: Convert XML to JSON
        run: |
          XMLFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-rss-file.xml"
          JSONFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-podcast-data.json"
          npx tsx scripts/xml-to-json.ts "$XMLFILE" "$JSONFILE"
          echo "Converted XML to JSON: $JSONFILE"

      - name: Generate episodes.json
        run: |
          JSONFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-podcast-data.json"
          EPISODESFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-episodes.json"
          npx tsx scripts/generate-episodes.ts "$JSONFILE" "$EPISODESFILE"
          echo "Generated episodes.json: $EPISODESFILE"

      - name: Update all platform URLs
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          EPISODESFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-episodes.json"
          echo "Finding all platform URLs for new episodes..."
          npx tsx scripts/update-new-episode-urls.ts "$EPISODESFILE"

      - name: Find new episodes
        id: episodes
        run: |
          PODCASTFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-podcast-data.json"
          echo "Finding new episodes by comparing podcast data files..."
          EPISODES_JSON=$(npx tsx scripts/find-episodes-without-transcripts.ts "$PODCASTFILE")
          echo "New episodes found: $EPISODES_JSON"
          echo "episodes=$EPISODES_JSON" >> $GITHUB_OUTPUT

      - name: Post new episode to X
        if: steps.episodes.outputs.episodes != '[]' && steps.episodes.outputs.episodes != '' && (github.event_name == 'schedule' || inputs.post_to_x == true)
        continue-on-error: true
        env:
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
        run: |
          # Extract the first new episode GUID from the array
          NEW_EPISODES='${{ steps.episodes.outputs.episodes }}'
          NEW_GUID=$(echo "$NEW_EPISODES" | jq -r '.[0].guid')

          if [ -n "$NEW_GUID" ] && [ "$NEW_GUID" != "null" ]; then
            echo "Posting new episode to X: $NEW_GUID"
            npx tsx scripts/post-x-new-episode-intro.ts "$NEW_GUID" "@togashi_ryo, @onepercentdsgn"
          else
            echo "No new episode found to post"
          fi

      - name: Delete old files (older than 3 days)
        run: |
          cd public/rss
          find . -name "*-rss-file.xml" -type f -mtime +3 -delete
          find . -name "*-podcast-data.json" -type f -mtime +3 -delete
          find . -name "*-episodes.json" -type f -mtime +3 -delete
          echo "Deleted files older than 3 days"

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add public/rss/
          git diff --staged --quiet || git commit -m "chore: Update RSS feed - ${{ steps.timestamp.outputs.datetime }}"
          git push
