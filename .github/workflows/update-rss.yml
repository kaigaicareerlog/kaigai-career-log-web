name: Update RSS Feed

on:
  # 毎日午後4時（バンクーバー時間）に実行（UTC 23:00）
  # Runs daily at 4pm Vancouver time (23:00 UTC = 4pm PDT / 3pm PST)
  schedule:
    - cron: '0 23 * * *'

  # 手動実行も可能
  workflow_dispatch:

jobs:
  update-rss:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Set timestamp
        id: timestamp
        run: |
          echo "datetime=$(TZ=Asia/Tokyo date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Download latest RSS feed
        run: |
          FILENAME="public/rss/${{ steps.timestamp.outputs.datetime }}-rss-file.xml"
          curl -o "$FILENAME" https://anchor.fm/s/105976b60/podcast/rss
          echo "New RSS file created: $FILENAME"

      - name: Update channel info
        run: |
          XMLFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-rss-file.xml"
          npx tsx scripts/update-channel-info.ts "$XMLFILE" "public/rss/channel-info.json"
          echo "Channel info updated"

      - name: Generate episodes
        run: |
          XMLFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-rss-file.xml"
          EPISODESFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-episodes.json"
          npx tsx scripts/generate-episodes.ts "$XMLFILE" "$EPISODESFILE"
          echo "Generated episodes: $EPISODESFILE"

      - name: Delete old files
        run: |
          cd public/rss
          echo "Cleaning up old files..."

          # For XML files: Keep only the newest, delete all others
          NEWEST_XML=$(ls -t *-rss-file.xml 2>/dev/null | head -n 1)
          if [ -n "$NEWEST_XML" ]; then
            echo "Keeping newest RSS XML: $NEWEST_XML"
            OLD_XML=$(ls -t *-rss-file.xml 2>/dev/null | tail -n +2)
            if [ -n "$OLD_XML" ]; then
              echo "Deleting old RSS XML files:"
              echo "$OLD_XML"
              ls -t *-rss-file.xml | tail -n +2 | xargs rm -f
            else
              echo "No old RSS XML files to delete"
            fi
          fi

          # For episodes and podcast-data: Delete files older than 3 days
          OLD_EPISODES=$(find . -name "*-episodes.json" -type f -mtime +3)
          OLD_PODCAST=$(find . -name "*-podcast-data.json" -type f -mtime +3)

          if [ -n "$OLD_EPISODES" ]; then
            echo "Deleting episodes files older than 3 days:"
            echo "$OLD_EPISODES"
            find . -name "*-episodes.json" -type f -mtime +3 -delete
          else
            echo "No old episodes files to delete"
          fi

          if [ -n "$OLD_PODCAST" ]; then
            echo "Deleting podcast-data files older than 3 days:"
            echo "$OLD_PODCAST"
            find . -name "*-podcast-data.json" -type f -mtime +3 -delete
          else
            echo "No old podcast-data files to delete"
          fi

          echo "Cleanup completed"

      - name: Update all platform URLs
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          EPISODESFILE="public/rss/${{ steps.timestamp.outputs.datetime }}-episodes.json"
          echo "Finding all platform URLs for new episodes..."
          npx tsx scripts/update-new-episode-urls.ts "$EPISODESFILE"

      - name: Auto post episode to X
        env:
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
        run: |
          echo "Looking for episodes to post to X..."
          npx tsx scripts/auto-post-episode-to-x.ts "@togashi_ryo, @onepercentdsgn" || echo "No episodes to post or posting failed"

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add public/rss/
          git diff --staged --quiet || git commit -m "chore: Update RSS feed and post episode intro - ${{ steps.timestamp.outputs.datetime }}"
          git push
